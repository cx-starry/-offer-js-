// 跳台阶
// 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。// 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。

// 思路：
// 假定第一次跳的是一阶，那么剩下的是n-1个台阶，跳法是f（n-1）；
// 假定第一次跳的是2阶，那么剩下的是n-2个台阶，跳法是f（n-2）；
// 由假设得出总跳法为：f（n）=f（n-1）+f（n-2）；
// 当台阶只有一阶时，f（1）=1，只有两阶时时，f（2）=2；
// 到这大家估计都看出来了，最终得出的是一个斐波那契数列：
// n=1, f(n)=1
// n=2, f(n)=2
// n>2,且为整数, f(n)=f(n-1)+f(n-2)

function jumpFloor(number)
{
  if (number<0){
    return -1;
  }else if(number <=2){
    return number
  }
  let arr = [];
  arr[0] = 1;
  arr[1] = 2;
  for(let i = 2; i < number; i++) {
    arr[i] = arr[i - 1] + arr[i - 2];
  }
  return arr[number-1];
}
